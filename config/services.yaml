# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    app.search.engine.wrapper.list: ['solr', 'elasticsearch', 'legacy']

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Index

    #App\Search\Index\Elasticsearch\ContentTypeIdentifier: Automatically well configured

    App\Search\Index\Solr\ContentTypeIdentifier:
        tags: [ibexa.search.solr.field.mapper.block]

    # Criterion

    App\Search\Query\Criterion\Elasticsearch\ContentTypeIdentifier:
        decorates: Ibexa\Elasticsearch\Query\CriterionVisitor\ContentTypeIdentifierVisitor
        #tags:
        #    - ibexa.search.elasticsearch.query.content.criterion.visitor
        #    - ibexa.search.elasticsearch.query.location.criterion.visitor

    App\Search\Query\Criterion\Legacy\ContentTypeIdentifier:
        decorates: Ibexa\Core\Search\Legacy\Content\Common\Gateway\CriterionHandler\ContentTypeIdentifier
        #tags:
        #    - ibexa.search.legacy.gateway.criterion_handler.content
        #    - ibexa.search.legacy.gateway.criterion_handler.location

    App\Search\Query\Criterion\Filter\ContentTypeIdentifier:
        decorates: Ibexa\Core\Persistence\Legacy\Filter\CriterionQueryBuilder\Content\Type\IdentifierQueryBuilder
        #tags: [ibexa.filter.criterion.query.builder]

    App\Search\Query\Criterion\Solr\ContentTypeIdentifier:
        decorates: Ibexa\Solr\Query\Common\CriterionVisitor\ContentTypeIdentifierIn
        #tags:
        #    - ibexa.search.solr.query.content.criterion.visitor
        #    - ibexa.search.solr.query.location.criterion.visitor

    # Sort Clause

    App\Search\Query\SortClause\Elasticsearch\ContentTypeIdentifier:
        tags:
            - ibexa.search.elasticsearch.query.location.sort_clause.visitor
            - ibexa.search.elasticsearch.query.content.sort_clause.visitor

    App\Search\Query\SortClause\Legacy\ContentTypeIdentifier:
        tags:
            - ibexa.search.legacy.gateway.sort_clause_handler.location
            - ibexa.search.legacy.gateway.sort_clause_handler.content

    App\Search\Query\SortClause\Solr\ContentTypeIdentifier:
        tags:
            - ibexa.search.solr.query.location.sort_clause.visitor
            - ibexa.search.solr.query.content.sort_clause.visitor

    # Aggregation

    app.search.elasticsearch.query.aggregation.content_type_identifier.visitor:
        class: Ibexa\Elasticsearch\Query\AggregationVisitor\TermAggregationVisitor
        factory: [ '@Ibexa\Elasticsearch\Query\AggregationVisitor\Factory\SearchFieldAggregationVisitorFactory', 'createTermAggregationVisitor' ]
        arguments:
            $aggregationClass: 'App\Search\Query\Aggregation\ContentTypeIdentifier'
            $searchIndexFieldName: 'content_type_identifier_s'
        #class: App\Search\Query\Aggregation\Visitor\Elasticsearch\ContentTypeIdentifier
        tags:
            - ibexa.search.elasticsearch.query.location.aggregation.visitor
            - ibexa.search.elasticsearch.query.content.aggregation.visitor

    app.search.elasticsearch.query.aggregation.content_type_identifier.result_extractor:
        class: Ibexa\Elasticsearch\Query\ResultExtractor\AggregationResultExtractor\TermAggregationResultExtractor
        arguments:
            $aggregationClass: 'App\Search\Query\Aggregation\ContentTypeIdentifier'
            $keyMapper: '@App\Search\Query\Aggregation\KeyMapper\ContentTypeIdentifier'
        #class: App\Search\Query\Aggregation\ResultExtractor\Elasticsearch\ContentTypeIdentifier
        tags:
            - ibexa.search.elasticsearch.query.location.aggregation.result.extractor
            - ibexa.search.elasticsearch.query.content.aggregation.result.extractor

    app.search.solr.query.aggregation.content_type_identifier.visitor:
        class: Ibexa\Solr\Query\Common\AggregationVisitor\TermAggregationVisitor
        factory: [ '@Ibexa\Solr\Query\Common\AggregationVisitor\Factory\SearchFieldAggregationVisitorFactory', 'createTermAggregationVisitor' ]
        arguments:
            $aggregationClass: 'App\Search\Query\Aggregation\ContentTypeIdentifier'
            $searchIndexFieldName: 'content_type_identifier_s'
        #class: App\Search\Query\Aggregation\Visitor\Solr\ContentTypeIdentifier
        tags:
            - ibexa.search.solr.query.content.aggregation.visitor
            - ibexa.search.solr.query.location.aggregation.visitor

    app.search.solr.query.aggregation.content_type_identifier.result_extractor:
        class: Ibexa\Solr\ResultExtractor\AggregationResultExtractor\TermAggregationResultExtractor
        arguments:
            $aggregationClass: 'App\Search\Query\Aggregation\ContentTypeIdentifier'
            $keyMapper: '@App\Search\Query\Aggregation\KeyMapper\ContentTypeIdentifier'
        #class: App\Search\Query\Aggregation\ResultExtractor\Solr\ContentTypeIdentifier
        tags:
            - ibexa.search.solr.query.location.aggregation.result.extractor
            - ibexa.search.solr.query.content.aggregation.result.extractor

    # Suggestion

    App\Search\Suggestion\Wildcard:
        decorates: Ibexa\Search\EventDispatcher\EventListener\ContentSuggestionSubscriber

    # Search Engine Wrapper

    app.search.engine.first_alive:
        class: App\Search\Wrapper\FirstAliveHandler
        arguments:
            $searchEngineAliases: '%app.search.engine.wrapper.list%'
            $statusServiceLocator: !service_locator
                legacy: '@app.search.engine.status.legacy'
                elasticsearch: '@app.search.engine.status.elasticsearch'
                solr: '@app.search.engine.status.solr'
        tags:
            - { name: ibexa.search.engine, alias: first_alive }

    app.search.engine.first_alive.indexer:
        class: App\Search\Wrapper\Indexer
        arguments:
            $searchHandler: '@app.search.engine.first_alive'
        tags:
            - { name: ibexa.search.engine.indexer, alias: first_alive }

    app.search.engine.status.legacy:
        class: App\Search\Status\Legacy

    app.search.engine.status.elasticsearch:
        class: App\Search\Status\Elasticsearch
        arguments:
            $baseUrl: '%elasticsearch_dsn%'
            $httpClient: '@http_client'

    app.search.engine.status.solr:
        class: App\Search\Status\Solr
        arguments:
            $baseUrl: '%solr_dsn%/%solr_core%'
            $httpClient: '@http_client'

    app.search.engine.less_capable:
        class: App\Search\Wrapper\LessCapableHandler
        arguments:
            $searchEngineAliases: '%app.search.engine.wrapper.list%'
        tags:
            - { name: ibexa.search.engine, alias: less_capable }

    app.search.engine.less_capable.indexer:
        class: App\Search\Wrapper\Indexer
        arguments:
            $searchHandler: '@app.search.engine.less_capable'
        tags:
            - { name: ibexa.search.engine.indexer, alias: less_capable }
